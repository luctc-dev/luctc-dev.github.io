{"version":3,"file":"337.8afa70e5.iframe.bundle.js","mappings":";;;;;;;;AA4CA;;;;;;;;;;;AAWA;AAyBA;;;;;;;;AAQA;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;AAOA;;;;;;AAMA;;;;;AAOA;;;;;;AAMA;;;;;AAOA;;AAIA;;;AAKA;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MA;;;;;;;;;;;;;;;;;;;;;;AC/BA;;;AAGA;;;;;;;AASA;;;;AAIA;AACA;;;;;;;;;;;AAkBA;;;;;;;AC9BA;;;;;;;AASA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;;;;;;;;;;;;;;;AAiBA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;AAQA;;;;AAMA;;;;;;;;;;;;;;;;AC9DA;;;ACjBA;;;;;;;AASA;;;;AAIA;AACA;;;;;;;;;;;AAaA;;;;;ACtBA;AAGA","sources":["webpack://@luctc/template-builder/./src/components/TemplateBuilder/index.styled.ts","webpack://@luctc/template-builder/./src/components/TemplateBuilder/colStructure/index.styled.ts","webpack://@luctc/template-builder/./src/components/TemplateBuilder/colStructure/ColModuleEmpty.tsx","webpack://@luctc/template-builder/./src/components/TemplateBuilder/moduleItem/index.styled.ts","webpack://@luctc/template-builder/./src/components/TemplateBuilder/rowDraggable/index.styled.ts","webpack://@luctc/template-builder/./src/components/TemplateBuilder/rowDraggable/RowDraggableView.tsx","webpack://@luctc/template-builder/./src/components/TemplateBuilder/rowDraggable/RowEmpty.tsx","webpack://@luctc/template-builder/./src/components/TemplateBuilder/settingGlobalTab/SettingGlobalTab.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Tabs } from 'antd';\nimport { desktop } from '../../styles/utils';\nimport IconBlock from '../atoms/iconBlock';\nimport ColumnBlock from '../atoms/columnBlock';\n\nexport const StyledScrollBars = `\n  > [data-rbd-droppable-id='all-rows'] {\n    min-height: 100%;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background-color: transparent;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    border-radius: 6px;\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  position: relative;\n\n  height: 100%;\n  background-color: #eee;\n`;\n\ntype StyledContentProps = {\n  $bodyContentComputedStyle: {\n    align: string;\n    linkColor: string;\n    messageWidth: string;\n    messageBackgroundColor: string;\n  };\n};\n\nexport const StyledContent = styled.div<StyledContentProps>`\n  transition: all 0.15s;\n  border-right: 1px solid #ccc;\n  padding: 0;\n  width: 100%; // Todo with mobile and desktop mode\n  min-height: 100%;\n\n  > [data-rbd-droppable-id='all-rows'] {\n    min-height: 90vh;\n  }\n\n  ${(props) => {\n    const computed = props.$bodyContentComputedStyle;\n    const width = computed.messageWidth\n      ? `\n    .setting_messageWidth {\n      width: ${computed.messageWidth} !important;\n    }`\n      : '';\n    const align = computed.align === 'left' ? '.setting_contentAlign { margin-left: 0; }' : '';\n    const linkColor = `\n      a {\n        color: ${computed.linkColor}\n      }\n    `;\n    const bgColor = computed.messageBackgroundColor\n      ? `\n    .setting_messageBgColor {\n      background-color: ${computed.messageBackgroundColor};\n    }`\n      : '';\n\n    return `${width}${align}${linkColor}${bgColor}`;\n  }}\n`;\n\nexport const StyledContentWrap = styled.div`\n  display: flex;\n  flex: 1 1;\n  overflow-y: overlay;\n  padding-top: 20px;\n  max-height: 100%;\n  align-items: flex-start;\n\n  ${StyledScrollBars}\n`;\n\nexport const StyledWrapAllRows = styled.div`\n  width: 100%;\n`;\n\nexport const StyledSidebar = styled.div`\n  width: 20px;\n  display: flex;\n  height: 100%;\n  text-align: left;\n  background: #f9f9f9;\n  color: #8f9699;\n  transition: all 0.15s;\n  position: relative;\n\n  .sidebar-hide {\n    top: 10px;\n    left: -16px;\n    z-index: 1;\n    position: absolute;\n    opacity: 0;\n    transition: all 0.15s;\n  }\n\n  &[data-show='false'] {\n    & > .ant-tabs {\n      opacity: 0;\n    }\n    .sidebar-hide {\n      opacity: 1;\n    }\n    &:hover {\n      width: 30px;\n    }\n  }\n\n  &[data-show='true'] {\n    width: 411px;\n    .sidebar-hide > svg {\n      transform: rotateY(180deg);\n    }\n    &:hover {\n      .sidebar-hide {\n        opacity: 1;\n      }\n    }\n  }\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  width: 100%;\n\n  &.ant-tabs-top > .ant-tabs-nav {\n    margin-bottom: 0;\n\n    &::before {\n      content: none;\n    }\n    .ant-tabs-tab {\n      width: 33.333%;\n      background: #d6d9dc;\n      justify-content: center;\n      border-radius: 0;\n      border-color: #c7c7c7;\n      padding: 13px 16px 12px;\n      font-size: 13px;\n      text-transform: uppercase;\n\n      & + .ant-tabs-tab {\n        margin-left: 0;\n      }\n      &.ant-tabs-tab-active {\n        background: #f9f9f9;\n        border-left-color: transparent;\n        border-right-color: transparent;\n        border-bottom-color: transparent;\n\n        .ant-tabs-tab-btn {\n          color: #516167;\n        }\n      }\n    }\n\n    .ant-tabs-nav-list {\n      width: 100%;\n    }\n  }\n\n  .ant-tabs-content {\n    height: 100%;\n    max-height: 100%;\n  }\n\n  ${desktop} {\n    .ant-tabs-nav-operations {\n      display: none !important;\n    }\n  }\n`;\n\nexport const StyledTabContent = styled.div`\n  padding: 16px;\n  max-height: 100%;\n  overflow: overlay;\n  height: 100%;\n\n  ${StyledScrollBars}\n\n  &[data-if='false'] {\n    display: none;\n  }\n`;\n\nexport const StyledTabContentSetting = styled.div`\n  padding-top: 16px;\n  max-height: 100%;\n  overflow: overlay;\n  height: 100%;\n\n  ${StyledScrollBars}\n\n  &[data-if='false'] {\n    display: none;\n  }\n`;\n\nexport const StyledIconBlock = styled(IconBlock)`\n  flex: 1;\n`;\n\nexport const StyledColumnBlock = styled(ColumnBlock)`\n  margin-bottom: 15px;\n  background-color: #fff;\n`;\n\nexport const StyledListModule = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n\n  > div {\n    width: calc(33.33% - 11px);\n\n    // To void layout glitch. Override the transform value of react-beautiful-dnd\n    transform: none !important;\n  }\n\n  .hide {\n    display: none;\n  }\n`;\n\nexport const StyledListColPlaceholder = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  > div {\n    // To void layout glitch. Override the transform value of react-beautiful-dnd\n    transform: none !important;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const StyledColWrapper = styled.div`\n  border: 2px solid transparent;\n  flex-grow: 1;\n\n  &.hhg-col-1 {\n    width: 8.3333333%;\n  }\n  &.hhg-col-2 {\n    width: 16.6666666%;\n  }\n  &.hhg-col-3 {\n    width: 25%;\n  }\n  &.hhg-col-4 {\n    width: 33.33333333%;\n  }\n  &.hhg-col-6 {\n    width: 50%;\n  }\n  &.hhg-col-8 {\n    width: 66.6666666%;\n  }\n  &.hhg-col-9 {\n    width: 66.6666666%;\n  }\n  &.hhg-col-12 {\n    width: 100%;\n  }\n\n  .hide {\n    display: none;\n  }\n`;\n\nexport const StyledModuleList = styled.div`\n  position: relative;\n  height: 100%;\n\n  &::after {\n    content: '';\n    opacity: 0;\n    top: 0;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 2px solid #2d87f3;\n    outline-offset: -1px;\n    z-index: 2;\n    pointer-events: none;\n    transition: all 0.15s;\n  }\n  &[data-dragging-over='true']::after {\n    opacity: 1;\n    background-color: rgba(45, 135, 243, 0.15);\n  }\n`;\n","import { ThemeProps } from 'components/providers/theme';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Icon from '../../atoms/icons/Icon';\n\nconst StyledText = styled.p`\n  font-size: 12px;\n  margin: 5px 0 0 0;\n  color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  text-align: center;\n  white-space: nowrap;\n  max-width: 100%;\n  padding: 0 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nconst StyledColModuleEmpty = styled.div`\n  height: 100%;\n  width: 100%;\n  min-height: 75px;\n  color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  outline: 1px dashed ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  background: rgb(45 135 243 / 20%);\n  outline-offset: -1px;\n  word-break: break-word;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  lex-direction: column;\n  flex-direction: column;\n  position: relative;\n  border-radius: 4px;\n`;\n\ntype Props = {\n  rowId?: string;\n  columnId?: string;\n};\n\nfunction ColModuleEmpty({ columnId }: Props) {\n  return (\n    <StyledColModuleEmpty>\n      <Icon name=\"UpCircleSolid\" />\n      <StyledText>Drop content blocks here</StyledText>\n      {/* <span>Col: {columnId}</span> */}\n    </StyledColModuleEmpty>\n  );\n}\n\nexport { ColModuleEmpty };\n","import styled from 'styled-components';\nimport { ThemeProps } from '../../providers/theme';\n\nexport const Container = styled.div`\n  position: relative;\n  transition: all 0.15s;\n  outline: 2px solid transparent;\n\n  &.module--hovered,\n  &.module--selected {\n    outline-color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n\n    .tcl-drag-column-start &,\n    .tcl-drag-control-start & {\n      outline-color: transparent !important;\n    }\n  }\n`;\n\nexport const StyledModuleMove = styled.div`\n  position: absolute;\n  color: #fff;\n  background-color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  right: -16px;\n  top: calc(50% - 16px);\n  border-radius: 20px;\n  pointer-events: none;\n  transition: all 0.15s;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: grab;\n  z-index: -1;\n  opacity: 0;\n  pointer-events: none;\n\n  &.show {\n    opacity: 1;\n    z-index: 15;\n    pointer-events: auto;\n\n    .tcl-drag-column-start &,\n    .tcl-drag-control-start & {\n      z-index: -1;\n      opacity: 0;\n      pointer-events: none;\n    }\n  }\n`;\n\nexport const StyledListActions = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  display: flex;\n  position: absolute;\n  bottom: -40px;\n  right: -2px;\n  background-color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  box-shadow: 0 2px 6px rgb(0 0 0 / 30%);\n  z-index: 7;\n\n  > li {\n    width: 35px;\n    height: 30px;\n    border-right: 1px solid rgb(255 255 255 / 30%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n\n    &:last-child {\n      border-right: 0;\n    }\n  }\n\n  svg {\n    color: #fff;\n    display: block;\n  }\n`;\n\nexport const StyledName = styled.span`\n  display: block;\n  position: absolute;\n  bottom: 0;\n  right: -1px;\n  transform: translateY(100%);\n  background-color: #2d87f3;\n  font-size: 12px;\n  color: #fff;\n  padding: 0 5px;\n  z-index: 1;\n  text-transform: capitalize;\n`;\n","import styled from 'styled-components';\nimport { ThemeProps } from '../../providers/theme';\nimport { StyledListActions as ListActions } from '../moduleItem/index.styled';\n\nexport const Container = styled.div`\n  width: 100%;\n  position: relative;\n  // min-height: 75px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    pointer-events: none;\n    outline: 2px solid transparent;\n    outline-offset: -2px;\n    z-index: 1;\n    transition: all 0.15s;\n  }\n\n  &.row--hovered,\n  &.row--selected {\n    &::before {\n      outline-color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n    }\n\n    .tcl-drag-column-start &,\n    .tcl-drag-control-start & {\n      outline-color: transparent !important;\n    }\n  }\n\n  &[data-hide-desktop='true'] .col-structure > div {\n    opacity: 0.5;\n    cursor: default;\n    filter: blur(1px);\n    z-index: 1;\n  }\n`;\n\nexport const StyledMove = styled.div`\n  position: absolute;\n  left: -2px;\n  top: 50%;\n  color: #fff;\n  transform: translateY(-50%);\n  background-color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  padding: 5px 8px 2px 8px;\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  cursor: grab;\n  opacity: 0;\n  z-index: -1;\n  pointer-events: none;\n  transition: all 0.15s;\n\n  &.show {\n    opacity: 1;\n    z-index: 3;\n    pointer-events: auto;\n\n    .tcl-drag-column-start &,\n    .tcl-drag-control-start & {\n      z-index: -1;\n      opacity: 0;\n      pointer-events: none;\n    }\n  }\n`;\n\nexport const StyledRowContent = styled.div`\n  display: flex;\n  // width: 600px;\n  // max-width: 600px;\n  margin: auto;\n  // padding: 5px 0px;\n`;\n\nexport const StyledListActions = styled(ListActions)`\n  top: 10px;\n  right: 10px;\n  bottom: auto;\n`;\n\nexport const StyledHideOn = styled.div`\n  &.hide-desktop::before {\n    content: url(\"data:image/svg+xml,%3Csvg width='20' height='18' viewBox='0 0 20 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='20' height='18' /%3E%3Cpath d='M7.1525 4.9263H14.3357V10.7322L15.2176 11.4455C15.2189 11.427 15.2278 11.4124 15.2278 11.3939V4.5624C15.2278 4.25143 14.9852 4 14.6859 4H6.00635L7.07354 4.86146L7.1525 4.9263Z' fill='white'/%3E%3Cpath d='M15.8953 13.2007L4.6586 4.11698C4.5408 4.02236 4.37016 4.0442 4.27846 4.16726L4.05687 4.46302C3.96518 4.58542 3.98683 4.76208 4.10399 4.85802L15.3414 13.9404C15.4585 14.0364 15.6292 14.0139 15.7215 13.8915L15.9425 13.5957C16.0348 13.4726 16.0138 13.296 15.8953 13.2007Z' fill='white'/%3E%3Cpath d='M12.8007 13.096C12.746 13.0133 12.6708 12.9485 12.5772 12.9161C12.5314 12.8995 12.4836 12.8856 12.4327 12.8856H11.1617L10.8994 11.956H11.3903L10.2442 11.0304H5.66401V7.32782L4.77319 6.60728V11.3943C4.77319 11.7046 5.01452 11.956 5.31379 11.956H9.12157L8.83821 12.8856H7.56726C7.31701 12.8856 7.11325 13.0967 7.11325 13.3574C7.11325 13.6174 7.31701 13.8285 7.56726 13.8285H12.4327C12.6829 13.8285 12.8867 13.6174 12.8867 13.3574C12.8867 13.2581 12.8504 13.1721 12.8007 13.096Z' fill='white'/%3E%3C/svg%3E \");\n  }\n  &.hide-mobile::before {\n    content: url(\"data:image/svg+xml,%3Csvg width='20' height='18' viewBox='0 0 20 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='20' height='18' /%3E%3Cpath d='M7.35449 7.51275L12.0118 11.2775H12.0462L7.35449 7.48563V7.51275Z' fill='white'/%3E%3Cpath d='M7.35449 6.29735L12.576 10.518V10.4816L7.35449 6.26096V6.29735Z' fill='white'/%3E%3Cpath d='M15.8953 13.2007L13.468 11.2383L12.5765 10.5177L7.35502 6.2971L6.46354 5.57723L4.65894 4.11698C4.5405 4.02236 4.36985 4.0442 4.27879 4.16726L4.05656 4.46302C3.9655 4.58542 3.98651 4.76208 4.10432 4.85802L6.46354 6.76488L7.35502 7.48541L12.0467 11.278L13.468 12.4266L15.3414 13.9404C15.4592 14.0364 15.6292 14.0139 15.7215 13.8915L15.9425 13.5957C16.0348 13.4726 16.0138 13.296 15.8953 13.2007' fill='white'/%3E%3Cpath d='M7.35471 11.2778V8.70074L6.46387 7.98087V13.1741C6.46387 13.5883 6.78607 13.9244 7.18533 13.9244H12.7462C13.0092 13.9244 13.2295 13.7709 13.3556 13.5519L10.543 11.2778H7.35471Z' fill='white'/%3E%3Cpath d='M7.35523 4.9263H12.5767V9.29382L13.4688 10.0137V4.74964C13.4688 4.33545 13.1454 4 12.7467 4H7.18585C6.90313 4 6.66434 4.17269 6.5459 4.41882L7.35523 5.07319V4.9263Z' fill='white'/%3E%3C/svg%3E%0A\");\n  }\n  &::before {\n    left: 0;\n    top: -20px;\n    z-index: 1;\n    left: -2px;\n    background-color: #2d87f3;\n    position: absolute;\n    height: 20px;\n  }\n`;\n","import React from 'react';\nimport cls from 'classnames';\nimport Icon from '../../atoms/icons/Icon';\nimport { Props } from './RowDraggable';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { ColStructure } from '../colStructure';\nimport { Container, StyledListActions, StyledMove, StyledRowContent, StyledHideOn } from './index.styled';\n\ntype PropsView = Props & {\n  index: number;\n  draggableId: string;\n  classes: string;\n  onClickWholeRow: (evt: any) => void;\n  onMouseEnter: (evt: any) => void;\n  onMouseLeave: (evt: any) => void;\n  containerStyle: Record<string, string>;\n  contentComputedStyled: Record<string, string>;\n  contentStyle: Record<string, string>;\n  rowData: any;\n  isHovered: boolean;\n  isSelected: boolean;\n  onConfirmDelete: () => void;\n  onConfirmClone: () => void;\n};\n\nfunction _RowDraggableView({\n  index, //\n  draggableId,\n  classes,\n  onClickWholeRow,\n  onMouseEnter,\n  onMouseLeave,\n  containerStyle,\n  contentComputedStyled,\n  contentStyle,\n  rowData,\n  isHovered,\n  isSelected,\n  onConfirmDelete,\n  onConfirmClone,\n}: PropsView) {\n  // console.log('rowdraggable view render', rowData.uuid);\n\n  return (\n    <Draggable draggableId={draggableId} index={index}>\n      {(provided, snapshot) => {\n        return (\n          <div {...provided.draggableProps} ref={provided.innerRef}>\n            {/* \n              // @ts-ignore */}\n            <Container\n              // {...restProps}\n              className={classes} //\n              onClick={onClickWholeRow}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              style={containerStyle}\n              data-hide-desktop={contentComputedStyled.hideContentOnDesktop}\n              data-hide-mobile={contentComputedStyled.hideContentOnMobile}\n            >\n              {/*\n                - Global Settings: messageWidth -> body.content.computedStyle.messageWidth\n              */}\n              <StyledRowContent\n                style={contentStyle} //\n                className=\"setting_messageWidth setting_messageBgColor setting_contentAlign\"\n              >\n                {rowData.columns.map((column: any, columnIdx: number) => {\n                  return (\n                    <ColStructure\n                      columnData={column} //\n                      key={column.uuid}\n                      rowId={rowData.uuid}\n                      rowIdx={index}\n                      columnIdx={columnIdx}\n                    />\n                  );\n                })}\n              </StyledRowContent>\n\n              <StyledMove\n                {...provided.dragHandleProps}\n                className={cls({\n                  show: isHovered || isSelected || snapshot.isDragging,\n                })}\n              >\n                <Icon name=\"Move\" />\n              </StyledMove>\n\n              {isSelected && (\n                <StyledListActions>\n                  <li onClick={onConfirmDelete}>\n                    <Icon name=\"Trash\" />\n                  </li>\n                  <li onClick={onConfirmClone}>\n                    <Icon name=\"Duplicate\" />\n                  </li>\n                </StyledListActions>\n              )}\n\n              {/* Icon - Row is hide on desktop or mobile */}\n              {isHovered && !isSelected && (\n                <StyledHideOn\n                  className={cls({\n                    'hide-desktop': String(contentComputedStyled.hideContentOnDesktop) === 'true',\n                    'hide-mobile': String(contentComputedStyled.hideContentOnMobile) === 'true',\n                  })}\n                />\n              )}\n            </Container>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n}\n\nconst RowDraggableView = React.memo(_RowDraggableView);\n\nexport { RowDraggableView };\n","import { ThemeProps } from 'components/providers/theme';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Icon from '../../atoms/icons/Icon';\n\nconst StyledText = styled.p`\n  font-size: 12px;\n  margin: 5px 0 0 0;\n  color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  text-align: center;\n  white-space: nowrap;\n  max-width: 100%;\n  padding: 0 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nconst StyledRowEmpty = styled.div`\n  height: 100%;\n  width: 100%;\n  min-height: 75px;\n  color: ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  outline: 1px dashed ${(props: ThemeProps) => props.theme.colors.primaryBase};\n  background: rgb(45 135 243 / 20%);\n  outline-offset: -1px;\n  word-break: break-word;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  lex-direction: column;\n  flex-direction: column;\n  position: relative;\n  border-radius: 4px;\n`;\n\nfunction RowEmpty() {\n  return (\n    <StyledRowEmpty>\n      <Icon name=\"UpCircleSolid\" />\n      <StyledText>Drop row blocks here</StyledText>\n    </StyledRowEmpty>\n  );\n}\n\nexport { RowEmpty };\n","import React from 'react';\nimport { WidgetSectionTitle } from '../../atoms/widgetSectionTitle';\nimport { Widget, WidgetPath, WidgetType } from '../../atoms/widgets';\nimport * as immutable from 'object-path-immutable';\nimport { useBuilderContext } from '../useBuilderContext';\nimport styled from 'styled-components';\nimport { StyledScrollBars } from '../index.styled';\n\nconst StyledSettingGlobalTab = styled.div`\n  padding-top: 16px;\n  height: 100%;\n  overflow: overlay;\n\n  ${StyledScrollBars}\n`;\n\nconst listGlobalWidgets: WidgetType[] = [\n  'ContentAreaWidth',\n  'ContentAreaAlign',\n  'BodyBackgroundColor',\n  'ContentAreaBgColor',\n  'BodyBgImage',\n  'ContentFontFamily',\n  'ContentLinkColor',\n];\n\nfunction SettingGlobalTab() {\n  const { builderData, onUpdateBodyStyle } = useBuilderContext();\n  const data = builderData.body;\n\n  return (\n    <StyledSettingGlobalTab>\n      <WidgetSectionTitle title=\"General Options\" />\n      {listGlobalWidgets.map((widgetKey) => {\n        const WidgetComp = Widget[widgetKey];\n        const pathObj = WidgetPath[widgetKey];\n        const valueFromPath = immutable.get(data, pathObj);\n\n        return WidgetComp ? (\n          <WidgetComp\n            key={widgetKey} //\n            value={valueFromPath}\n            name=\"\"\n            onChange={(path, value) => {\n              onUpdateBodyStyle({\n                path,\n                value,\n              });\n            }}\n          />\n        ) : null;\n      })}\n    </StyledSettingGlobalTab>\n  );\n}\n\nexport default SettingGlobalTab;\n"],"names":[],"sourceRoot":""}